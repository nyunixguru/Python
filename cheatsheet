
Getting help on an object(s)
l = [1,2,3]  #define a list
help(l)
help(l.insert)   # get help syntax on a method
dir(l)

import os
help(os)

Strings - immutable ordered sequences indexable and sliceable single or double quotes allowed
help('string') # all methods of string
mystring ='helloDavid'
mystring[0]   #'h'
mystring[0:3]  #'hel'
mystring.split('D')   #['hello', 'avid']

Dictionaries
d = {}    #empty dictionary
d[0] = "hello"  #add element to dictionary
d  {0: 'hello', 1: 'there'}
d.keys()        # get all keys [0, 1]
d.values()      #vget all values  ['hello', 'there']
d.items()       #get all key,values as a list of tuples [(0, 'hello'), (1, 'there')]
d.get(0)       #get value of particular key  'hello'
d.has_key(0)   # does it contain key ? True
for k,v in d.iteritems():      #returns tuples
	print k, v
Booleans
True or False
type(False) ==> bool

if then else
if expression1:
   statement(s)
elif expression2:
   statement(s)
else:
   statement(s)

for loops
for i in range(10):         #0,1,2,...9
for num in range(10,15):    #10,11,12,13,14,14
for i in prev_defined_list:    #iterable list,tuple [] ()
for i in 'abcde':              #loop over string
for index in range(len(list)):
    print list[index]

while loops
while  count < 3 :

List comprehensions
[x**2 for x in range(10)]     #[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
[x**2 for x in range(10) if x%2 == 0]  #[0, 4, 16, 36, 64]
[letter for letter in str]     #['d', 'a', 'v', 'i', 'd']
[letter for letter in str if letter == 'd'] # ['d', 'd']

Functions
def say_hello(name="David"):
	return "hello"+name
say_hello("jin")   # 'hellojin'
say_hello()  # 'helloDavid' returns default parameter

Files
f = open("/etc/passwd","r")
text = f.readline()
text1 = f.read()
print text
print "\n"
print text1
f.close()
